#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import gi
gi.require_version('Gtk', '3.0')
from gi.repository import Gtk
import sqlite3
import threading
import time
import os

class VnCoreTool(Gtk.Window):
    def __init__(self):
        super(VnCoreTool, self).__init__()
        self.init_ui()
        self.show_all()
        self.initialDB()

    def init_ui(self):
        self.set_border_width(15)
        self.set_title("Công cụ tạo tập dữ liệu huấn luyện")
        self.set_size_request(500, 250)
        self.set_position(Gtk.WindowPosition.CENTER)
        self.set_icon_from_file('favicon.svg')
        self.set_resizable(False)
        self.connect('delete_event', self.quit)

        vbox = Gtk.Box(orientation=Gtk.Orientation.VERTICAL, spacing=6)
        vbox.set_homogeneous(False)
        self.add(vbox)

        tbox = Gtk.Box(spacing=10)
        self.btnSegmention = Gtk.Button(label="Tách từ")
        # self.btnSegmention.connect("clicked", self.on_button_toggled, "1")
        tbox.pack_start(self.btnSegmention, False, False, 0)

        self.btnTagger = Gtk.Button(label="Gán nhãn")
        # self.btnTagger.connect("clicked", self.on_button_toggled, "2")
        tbox.pack_start(self.btnTagger, False, False, 0)

        css_btn = Gtk.CssProvider()
        css_btn.load_from_data(b'.gtk_button { padding:5px 10px; font-family:arial,sans-serif; font-size:medium; border-radius: 0;background-image: none;background-color:white; } .gtk_actived { background-color:transparent; border:none; }')
        self.btnSegmention.get_style_context().add_provider(css_btn, Gtk.STYLE_PROVIDER_PRIORITY_APPLICATION)
        self.btnTagger.get_style_context().add_provider(css_btn, Gtk.STYLE_PROVIDER_PRIORITY_APPLICATION)
        self.btnSegmention.get_style_context().add_class('gtk_button')
        self.btnTagger.get_style_context().add_class('gtk_button')
        
        vbox.pack_start(tbox,False, False, 0)

        # self.on_button_toggled(self.btnSegmention, "1")

        scrolledWindow = Gtk.ScrolledWindow()
        scrolledWindow.set_hexpand(True)
        scrolledWindow.set_vexpand(True)
        scrolledWindow.set_size_request(-1, 150)
        vbox.pack_start(scrolledWindow,True, True, 1)

        self.textview = Gtk.TextView()
        self.textview.set_editable(False)
        self.textview.set_wrap_mode(Gtk.WrapMode.WORD)
        scrolledWindow.add(self.textview)

        provider = Gtk.CssProvider()
        provider.load_from_data(b'.gtk_textview { padding:10px; font-family:arial,sans-serif; font-size:medium;}')
        self.textview.get_style_context().add_provider(provider, Gtk.STYLE_PROVIDER_PRIORITY_APPLICATION)
        self.textview.get_style_context().add_class('gtk_textview')

        provider = Gtk.CssProvider()
        provider.load_from_data(b'.gtk_label { padding:0; font-family:arial,sans-serif; font-size:medium; margin:0;}')

        self.lblState = Gtk.Label(label="..", xalign=0)
        self.lblState.get_style_context().add_provider(provider, Gtk.STYLE_PROVIDER_PRIORITY_APPLICATION)
        self.lblState.get_style_context().add_class('gtk_label')
        
        vbox.pack_start(self.lblState, True, True, 0)

        hbox = Gtk.Box(orientation=Gtk.Orientation.HORIZONTAL, spacing=5)

        self.btnLoad = Gtk.Button(label="Tải dữ liệu")
        # self.btnLoad.connect('clicked', self.on_load_clicked)
        hbox.pack_start(self.btnLoad, True, True, 0)

        self.btnPrev = Gtk.Button(label="Trước đó")
        # self.btnPrev.connect('clicked', self.on_prev_clicked)
        self.btnPrev.set_sensitive(False)
        hbox.pack_start(self.btnPrev, True, True, 0)
        
        self.btnNext = Gtk.Button(label="Tiếp theo")
        # self.btnNext.connect('clicked', self.on_next_clicked)
        self.btnNext.set_sensitive(False)
        hbox.pack_start(self.btnNext, True, True, 0)

        self.btnSave = Gtk.Button(label="Lưu dữ liệu")
        # self.btnSave.connect('clicked', self.on_saved_clicked)
        self.btnSave.set_sensitive(False)
        hbox.pack_start(self.btnSave, True, True, 0)

        self.btnEval = Gtk.Button(label="Tự động")
        # self.btnEval.connect('clicked', self.on_auto_clicked)
        self.btnEval.set_sensitive(False)
        hbox.pack_start(self.btnEval, True, True, 0)

        vbox.pack_start(hbox,False, False, 0)

        separator = Gtk.Separator(orientation=Gtk.Orientation.HORIZONTAL)
        separator.set_margin_top(0)
        separator.set_margin_bottom(0)
        vbox.pack_start(separator, True, False, 0)

        hbox = Gtk.Box(orientation=Gtk.Orientation.HORIZONTAL, spacing=5)
        self.lblDB = Gtk.Label(label="", xalign=0)
        self.lblDB.get_style_context().add_provider(provider, Gtk.STYLE_PROVIDER_PRIORITY_APPLICATION)
        self.lblDB.get_style_context().add_class('gtk_label')
        hbox.pack_start(self.lblDB, True, True, 0)
        self.lblSocket = Gtk.Label(label="", xalign=0)
        self.lblSocket.get_style_context().add_provider(provider, Gtk.STYLE_PROVIDER_PRIORITY_APPLICATION)
        self.lblSocket.get_style_context().add_class('gtk_label')
        hbox.pack_start(self.lblSocket, True, True, 0)
        hbox.set_margin_top(0)
        hbox.set_margin_bottom(0)
        vbox.pack_start(hbox,True, True, 0)

        self.job = threading.Thread(target=self.service, args=())
        self.job.killed = False
        self.job.start()

    def initialDB(self):
        try:
            self.db = sqlite3.connect(os.path.join(os.path.dirname(__file__),'openai.db'))
            self.db.execute("CREATE TABLE IF NOT EXISTS sentences (id INTEGER PRIMARY KEY, sentence TEXT, tokens TEXT)")
            if self.db.total_changes >= 0:
                self.lblDB.set_markup("<span color=\"green\">openai.db connected</span>")
            else:
                self.lblDB.set_markup("<span color=\"red\">openai.db not connected</span>")
        except Exception as ex:
            self.info_dialog("Lỗi kết nối tới CSDL", str(ex))

    def service(self):
        self.lblSocket.set_markup("<span color=\"green\">Listening.</span>")
        t = threading.currentThread()
        while True:
            if getattr(t,"killed", True):
                break
            print('Halo')
            time.sleep(0.1)

    def quit(self, sender, event):
        if self.job:
            self.job.killed = True
            time.sleep(0.1)
        Gtk.main_quit()

    def info_dialog(self, text, secondary_text):
        dialogWindow = Gtk.MessageDialog(parent=self, modal=True, destroy_with_parent=True, message_type=Gtk.MessageType.INFO, buttons=Gtk.ButtonsType.OK, text=text)
        dialogWindow.format_secondary_text(secondary_text)
        dialogWindow.run()
        dialogWindow.destroy()

if __name__ == "__main__":
    app = VnCoreTool()
    Gtk.main()
