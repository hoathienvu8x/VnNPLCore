#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import gi
gi.require_version('Gtk','3.0')
from gi.repository import Gtk
from gi.repository import GLib
import threading, time
from pyvi import ViTokenizer,ViPosTagger

def normalize_text(text):
    if '/B_W' in text or '/I_W' in text:
        tokens = text.strip().split(' ')
        text = ''
        for tok in tokens:
            word_tag = tok.split('/')
            tag = word_tag.pop()
            word = '/'.join(word_tag)
            if tag == 'I_W':
                text += '_'
            else:
                text += ' '
            text += word
    tags = ['Nc','Ny','Np','Nu','A','C','E','I','L','M','N','P','R','S','T','V','X','F']
    for t in tags:
        text = text.replace('/'+t+' ',' ')
    return text.strip()

class VnCoreTool(Gtk.Window):
    def __init__(self):
        super(VnCoreTool, self).__init__()
        self.lines = set()
        self.index = -1
        self.saveTo = ""
        self.action = "seggment"
        self.running = False
        self.job = None
        self.init_ui()

    def init_ui(self):
        self.set_border_width(15)
        self.set_title("Công cụ tạo tập dữ liệu huấn luyện")
        self.set_size_request(500, 250)
        self.set_position(Gtk.WindowPosition.CENTER)
        self.set_icon_from_file('favicon.svg')
        self.set_resizable(False)
        self.connect('destroy', Gtk.main_quit)

        vbox = Gtk.Box(orientation=Gtk.Orientation.VERTICAL, spacing=6)
        self.add(vbox)

        tbox = Gtk.Box(spacing=10)
        self.btnSegmention = Gtk.Button(label="Tách từ")
        self.btnSegmention.connect("clicked", self.on_button_toggled, "1")
        tbox.pack_start(self.btnSegmention, False, False, 0)
        self.btnTagger = Gtk.Button(label="Gán nhãn")
        self.btnTagger.connect("clicked", self.on_button_toggled, "2")
        tbox.pack_start(self.btnTagger, False, False, 0)

        css_btn = Gtk.CssProvider()
        css_btn.load_from_data(b'.gtk_button { padding:5px 10px; font-family:arial,sans-serif; font-size:medium; border-radius: 0;background-image: none;background-color:white; } .gtk_actived { background-color:transparent; border:none; }')
        self.btnSegmention.get_style_context().add_provider(css_btn, Gtk.STYLE_PROVIDER_PRIORITY_APPLICATION)
        self.btnTagger.get_style_context().add_provider(css_btn, Gtk.STYLE_PROVIDER_PRIORITY_APPLICATION)
        self.btnSegmention.get_style_context().add_class('gtk_button')
        self.btnTagger.get_style_context().add_class('gtk_button')
        
        vbox.pack_start(tbox,False, False, 0)
        
        self.on_button_toggled(self.btnSegmention, "1")        
        
        scrolledWindow = Gtk.ScrolledWindow()
        scrolledWindow.set_hexpand(True)
        scrolledWindow.set_vexpand(True)
        vbox.pack_start(scrolledWindow,True, True, 0)

        self.textview = Gtk.TextView()
        self.textview.set_editable(False)
        self.textview.set_wrap_mode(Gtk.WrapMode.WORD)
        scrolledWindow.add(self.textview)

        provider = Gtk.CssProvider()
        provider.load_from_data(b'.gtk_textview { padding:10px; font-family:arial,sans-serif; font-size:medium;}')
        self.textview.get_style_context().add_provider(provider, Gtk.STYLE_PROVIDER_PRIORITY_APPLICATION)
        self.textview.get_style_context().add_class('gtk_textview')

        self.lblState = Gtk.Label(label="", xalign=0)
        vbox.pack_start(self.lblState, False, False, 1)

        hbox = Gtk.Box(orientation=Gtk.Orientation.HORIZONTAL, spacing=5)

        self.btnLoad = Gtk.Button(label="Tải dữ liệu")
        self.btnLoad.connect('clicked', self.on_load_clicked)
        hbox.pack_start(self.btnLoad, True, True, 0)

        self.btnPrev = Gtk.Button(label="Trước đó")
        self.btnPrev.connect('clicked', self.on_prev_clicked)
        self.btnPrev.set_sensitive(False)
        hbox.pack_start(self.btnPrev, True, True, 0)
        
        self.btnNext = Gtk.Button(label="Tiếp theo")
        self.btnNext.connect('clicked', self.on_next_clicked)
        self.btnNext.set_sensitive(False)
        hbox.pack_start(self.btnNext, True, True, 0)

        self.btnSave = Gtk.Button(label="Lưu dữ liệu")
        self.btnSave.connect('clicked', self.on_saved_clicked)
        self.btnSave.set_sensitive(False)
        hbox.pack_start(self.btnSave, True, True, 0)

        self.btnEval = Gtk.Button(label="Tự động")
        self.btnEval.connect('clicked', self.on_auto_clicked)
        self.btnEval.set_sensitive(False)
        hbox.pack_start(self.btnEval, True, True, 0)

        vbox.pack_start(hbox,False, False, 1)

        self.btnAuto = Gtk.Button(label="Tự động chạy")
        self.btnAuto.connect('clicked', self.on_auto_run_clicked)
        vbox.pack_start(self.btnAuto,False, False, 1)

    def on_load_clicked(self, button, trigger=True):
        self.lblState.set_text("")
        filechooserdialog = Gtk.FileChooserDialog(title="Chọn tập tin", parent=self, action=Gtk.FileChooserAction.OPEN)
        filechooserdialog.add_buttons("_Open", Gtk.ResponseType.OK)
        filechooserdialog.add_buttons("_Cancel", Gtk.ResponseType.CANCEL)
        filechooserdialog.set_default_response(Gtk.ResponseType.OK)

        filter_text = Gtk.FileFilter()
        filter_text.set_name('Text files')
        filter_text.add_mime_type('text/plain')
        filechooserdialog.add_filter(filter_text)

        filePath = ""

        response = filechooserdialog.run()
        if response == Gtk.ResponseType.OK:
            filePath = filechooserdialog.get_filename()
            
        filechooserdialog.destroy()
        if filePath:
            try:
                with open(filePath,'r',encoding='utf-8') as f:
                    self.lines = f.readlines()
            except Exception as ex:
                self.info_dialog("Lỗi tải tập tin",str(ex))
                return
        else:
            self.info_dialog("Lỗi tải tập tin","Bạn chưa chọn tập tin")
            return
        if len(self.lines) == 0:
            self.info_dialog("Lỗi tải tập tin","Tập tin rỗng")
        else:
            if trigger:
                self.on_next_clicked(self.btnNext)
                self.textview.set_editable(True)
                self.btnNext.set_sensitive(True)
                self.btnSave.set_sensitive(True)
                self.btnEval.set_sensitive(True)

    def on_next_clicked(self, button):
        self.lblState.set_text("")
        if self.index + 1 < len(self.lines):
            self.index += 1
            text = normalize_text(self.lines[self.index])
            textbuffer = self.textview.get_buffer()
            textbuffer.set_text(text)
            self.btnEval.set_sensitive(True)
        else:
            self.btnNext.set_sensitive(False)
            self.btnEval.set_sensitive(False)
        if self.index == 0:
            self.btnPrev.set_sensitive(False)
        else:
            self.btnPrev.set_sensitive(True)

    def on_prev_clicked(self, button):
        self.lblState.set_text("")
        if self.index - 1 >= 0:
            self.index -= 1
            text = normalize_text(self.lines[self.index])
            textbuffer = self.textview.get_buffer()
            textbuffer.set_text(text)
            self.btnEval.set_sensitive(True)            
        else:
            self.btnPrev.set_sensitive(False)
            self.btnEval.set_sensitive(False)
        if self.index == 0:
            self.btnPrev.set_sensitive(False)
        else:
            self.btnPrev.set_sensitive(True)

    def on_saved_clicked(self, button, trigger=True):
        if not self.saveTo:
            filechooserdialog = Gtk.FileChooserDialog(title="Chọn tập tin lưu", parent=self, action=Gtk.FileChooserAction.SAVE)
            filechooserdialog.add_buttons("_Open", Gtk.ResponseType.OK)
            filechooserdialog.add_buttons("_Cancel", Gtk.ResponseType.CANCEL)
            filechooserdialog.set_default_response(Gtk.ResponseType.OK)

            filter_text = Gtk.FileFilter()
            filter_text.set_name('Text files')
            filter_text.add_mime_type('text/plain')
            filechooserdialog.add_filter(filter_text)

            response = filechooserdialog.run()
            if response == Gtk.ResponseType.OK:
                self.saveTo = filechooserdialog.get_filename()

            filechooserdialog.destroy()
        if not trigger:
            return
        if self.saveTo:
            try:
                textbuffer = self.textview.get_buffer()
                text = textbuffer.get_text(textbuffer.get_start_iter(),textbuffer.get_end_iter(),True).strip()
                text = text.replace('”','"')
                text = text.replace('“','"')
                with open(self.saveTo,'a+',encoding='utf-8') as f:
                    f.write(text + "\n")
                self.lblState.set_text("Đã lưu")
            except Exception as ex:
                self.info_dialog("Lỗi ghi tập tin",str(ex))
        else:
            self.info_dialog("Lỗi ghi tập tin", "Vui lòng chọn tập tin lưu trữ")

    def on_auto_clicked(self, button):
        textbuffer = self.textview.get_buffer()
        text = textbuffer.get_text(textbuffer.get_start_iter(),textbuffer.get_end_iter(),True).strip()
        if text:
            text = text.replace('”','"')
            text = text.replace('“','"')
            text = normalize_text(text+' ')
            if self.action == "seggment":
                text = ViTokenizer.tokenize(text)
            else:
                result = ViPosTagger.postagging(ViTokenizer.tokenize(text))
                text = ''
                for i in range(len(result[0])):
                    text += ' ' + result[0][i]+'/'+result[1][i]
                text = text.strip()
            textbuffer.set_text(text)

    def info_dialog(self, text, secondary_text):
        dialogWindow = Gtk.MessageDialog(parent=self, modal=True, destroy_with_parent=True, message_type=Gtk.MessageType.INFO, buttons=Gtk.ButtonsType.OK, text=text)
        dialogWindow.format_secondary_text(secondary_text)
        dialogWindow.run()
        dialogWindow.destroy()

    def on_button_toggled(self, button, name):
        if name == "1":
            self.btnSegmention.get_style_context().remove_class('gtk_actived')
            self.btnTagger.get_style_context().add_class('gtk_actived')
            self.action = "seggment"
        else:
            self.btnTagger.get_style_context().remove_class('gtk_actived')
            self.btnSegmention.get_style_context().add_class('gtk_actived')
            self.action = "tagger"

    

    def autorun(self, widget, data=None):
        try:
            if self.index >= 0:
                fout = open(self.saveTo, 'a+',encoding='utf-8')
            else:
                fout = open(self.saveTo, 'w',encoding='utf-8')
            total = len(self.lines)
            while self.running:
                if self.index < 0:
                    self.index += 1
                while self.index < total:
                    text = self.lines[self.index]
                    text = text.replace('”','"')
                    text = text.replace('“','"')
                    text = normalize_text(text+' ').strip()
                    if not text:
                        continue
                    if self.action == "seggment":
                        text = ViTokenizer.tokenize(text)
                    else:
                        result = ViPosTagger.postagging(ViTokenizer.tokenize(text))
                        text = ''
                        for i in range(len(result[0])):
                            text += ' ' + result[0][i]+'/'+result[1][i]
                        text = text.strip()
                    fout.write(text + "\n")
                    status = "Đã xử lý dòng %d/%d xong." % ((self.index + 1), total)
                    widget.set_text(status)
                    time.sleep(0.1)
                    t = threading.currentThread()
                    if getattr(t,"killed", True):
                        break
                    self.index += 1
            fout.close()
        except:
            pass

    def on_auto_run_clicked(self, button):
        disabled = self.running
        if not self.running:
            if len(self.lines) == 0:
                self.on_load_clicked(self.btnLoad, False)
            if len(self.lines) == 0:
                self.info_dialog("Lỗi tải tập tin", "Vui lòng chọn tập tin dữ liệu")
                return
            if not self.saveTo:
                self.on_saved_clicked(self.btnSave, False)
            if not self.saveTo:
                self.info_dialog("Lỗi chọn tập tin lưu trữ", "Vui lòng chọn tập tin lưu dữ liệu")
                return
            self.running = True
            button.set_label("Dừng")
        else:
            self.running = False
            if self.job:
                self.job.killed = True
                self.job.join()
            button.set_label("Tự động chạy")
        self.textview.set_editable(disabled)
        self.btnLoad.set_sensitive(disabled)
        self.btnNext.set_sensitive(disabled)
        self.btnSave.set_sensitive(disabled)
        self.btnEval.set_sensitive(disabled)
        self.btnSegmention.set_sensitive(disabled)
        self.btnTagger.set_sensitive(disabled)

        # https://stackoverflow.com/a/36499538
        self.job = threading.Thread(target=self.autorun,args=(self.lblState, None))
        self.job.killed = False
        self.job.start()

if __name__ == '__main__':
    win = VnCoreTool()
    win.show_all()
    Gtk.main()
